added to .gitignore:
node_modules
node_modules/
and .env

in package.json, added:
 "main": "server.js",
 and
 "scripts": {
    "start": "node backend/server.js",
    "server": "nodemon backend/server.js",
    "client": "npm start --prefix client",
    "dev": "concurrently \"npm run server\" \"npm run client\""
to always start the server first, provide le path to the server and client 
and to run at the same time the server and the client for us, so we don't have 
to get two separate windows for each.

After creating mongoDB cluster: add cluster connection to MONGO_URI in .env while 
replacing the password and db name

require('dotenv').config(); --> The dotenv is a zero-dependency module that loads environment variables 
from a .env file into process.env.
require() in Node.js --> is used to load and cache JavaScript modules.
The basic functionality of require is that it reads a JavaScript file, executes the file, 
and then proceeds to return the exports object

client font-awesome from cdnjs.com

store.js:
thunk --> make asynchronous requests in our actions, otherwise not possible in redux
composeWithDevTools allows to access the store from the browser developer tool (if redux extension installed )

cartActions.js
axios --> helps make the ajax request, and allows compatibility with several browsers
getState is part of redux-thunk

homepage:
after adding the dispatch to the homepage to get all the products when loading the page, we nned to add a proxy to the client/package.json.
then, restart the application for package.json to be reloaded.
the dispatch will then be redirected to the port 5000
useSelector(state => state.getProducts):
    //this useSelector takes the state and returns its getProducts data
  //A selector is a function that accepts Redux state as an argument and returns data that is derived from that state
  //useSelector() subscribes to the Redux store, and runs whenever an action is dispatched

  productPage:
  fragment -> at the end of ternary operator to render the product details when loading false and error false

  https://www.youtube.com/watch?v=0divhP3pEsg&list=WL&index=9&t=72s

heroku:
just to show how putting in production looks like (
cd client
npm run build
--> creates a mini version of our app (./client/build), easier to deploy in production)

steps:
heroku login
heroku create <name (optional)>
git remote ( to see what git is connected to)
add middlewares to server.js,
in .env, change NODE_ENV to : production
in heroku->dashboard->app name->Settings->Config Vars: add the environment variables from .env file
At root, add a Procfile file and insert -> web: node backend/server.js
Into ./package.json, add the following script:
"heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client",
git add .
git commit -m "final deployment"
git push heroku HEAD:master